{"version":3,"sources":["../../../js/providers/dialogflow/dfProvider.js"],"names":["googleProjectId","fbService","languageCode","sessionClient","dialogflow","SessionsClient","sendTextQueryToApiAi","sendEventToApiAi","bind","sessionIds","handleApiAiResponse","sender","text","params","sessionPath","get","sendTypingOn","request","session","queryInput","queryParams","payload","data","detectIntent","responses","result","queryResult","event","name","parameters","structjson","jsonToStructProto"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;AAeI,oBAAYA,eAAZ,EAA6BC,SAA7B,EAA+D;AAAA,YAAvBC,YAAuB,uEAAR,OAAQ;;AAAA;;AAE3D,aAAKF,eAAL,GAAuBA,eAAvB;AACA,aAAKE,YAAL,GAAoBA,YAApB;AACA,aAAKC,aAAL,GAAqB,IAAIC,qBAAWC,cAAf,EAArB;;AAEA,aAAKJ,SAAL,GAAiBA,YAAYA,SAAZ,GAAwB,IAAzC;;AAEA,aAAKK,oBAAL,GAA4B,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAA5B;AACA,aAAKD,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACH;;AAED;;;;;;;;;;;;;;;qBAaMF,oB;4FAAqBG,U,EAAYC,mB,EAAqBC,M,EAAQC,I;gBAAMC,M,uEAAS,E;;;;;;AACzEC,uC,GAAcX,cAAcW,WAAd,CAA0B,KAAKd,eAA/B,EAAgDS,WAAWM,GAAX,CAAeJ,MAAf,CAAhD,C;;AACpB,iCAAKV,SAAL,CAAee,YAAf,CAA4BL,MAA5B;;AAEMM,mC,GAAU;AACZC,yCAASJ,WADG;AAEZK,4CAAY;AACRP,0CAAM;AACFA,8CAAMA,IADJ;AAEFV,sDAAc,KAAKA;AAFjB;AADE,iCAFA;AAQZkB,6CAAa;AACTC,6CAAS;AACLC,8CAAMT;AADD;AADA;AARD,6B;;mCAcQV,cAAcoB,YAAd,CAA2BN,OAA3B,C;;;AAAlBO,qC;AACAC,kC,GAASD,UAAU,CAAV,EAAaE,W;;;AAE5BhB,gDAAoBC,MAApB,EAA4Bc,MAA5B;;;;;;;;;;;;;;;;;AAGJ;;;;;;;;;;;;;;;qBAaMlB,gB;8FAAiBE,U,EAAYC,mB,EAAqBC,M,EAAQgB,K;gBAAOd,M,uEAAS,E;;;;;;AACtEC,uC,GAAcX,cAAcW,WAAd,CAA0B,KAAKd,eAA/B,EAAgDS,WAAWM,GAAX,CAAeJ,MAAf,CAAhD,C;AACdM,mC,GAAU;AACZC,yCAASJ,WADG;AAEZK,4CAAY;AACRQ,2CAAO;AACHC,8CAAMD,KADH;AAEHE,oDAAY,KAAKC,UAAL,CAAgBC,iBAAhB,CAAkClB,MAAlC,CAFT,EAEoD;AACvDX,sDAAc,KAAKA;AAHhB;AADC;AAFA,6B;;mCAYQC,cAAcoB,YAAd,CAA2BN,OAA3B,C;;;AAAlBO,qC;AAEAC,kC,GAASD,UAAU,CAAV,EAAaE,W;;AAC5BhB,gDAAoBC,MAApB,EAA4Bc,MAA5B","file":"dfProvider.js","sourcesContent":["import dialogflow from 'dialogflow'\nimport structjson from './structjson'\n\n/**\n * \n * \n * @description Anonymus class to get the functions for using DialogFlow API.\n *              on version { 0.0.1 }. This class was created for using with Fb API,\n *              in next versions would be released for more platforms as Telegram.\n * \n * @version 0.0.1\n * \n */\n\n/** @constructor\n * \n * @argument {String} googleProjectId           Google ID Project for using as a key to \n *                                              auth on DialogFlow API.\n * \n * @argument {fbProvider Object} fbService      FbService Object to get access to Facebook \n *                                              messenger APIs/ Declare on this lib as \n *                                              \"fbProvider\" Module.\n * \n * @argument {String} languageCode              Language Code for using on DialogFlow\n *                                              default \"en-US\"\n */\n\nexport default class {\n    \n    constructor(googleProjectId, fbService, languageCode = 'en-US'){\n        \n        this.googleProjectId = googleProjectId;\n        this.languageCode = languageCode;\n        this.sessionClient = new dialogflow.SessionsClient();\n\n        this.fbService = fbService ? fbService : null;\n        \n        this.sendTextQueryToApiAi = this.sendEventToApiAi.bind(this);\n        this.sendEventToApiAi = this.sendEventToApiAi.bind(this);\n    }\n\n    /** Send a text query to DialogFlow API\n     * \n     * \n     * @method sendTextQueryToApiAi()           \n     * @param {String} sessionIds               Ids for actual session for send to API\n     * @param {Function} handleApiAiResponse    CallBack for handle response\n     * @param {*} sender                        Sender identifier\n     * @param {String} text                     Simple text to send\n     * @param {Object} params                   API params\n     * \n     * @returns callback handleApiAiResponse()\n     * \n     */\n    async sendTextQueryToApiAi(sessionIds, handleApiAiResponse, sender, text, params = {}) {\n        const sessionPath = sessionClient.sessionPath(this.googleProjectId, sessionIds.get(sender));\n        this.fbService.sendTypingOn(sender);\n \n        const request = {\n            session: sessionPath,\n            queryInput: {\n                text: {\n                    text: text,\n                    languageCode: this.languageCode,\n                },\n            },\n            queryParams: {\n                payload: {\n                    data: params\n                }\n            }\n        };\n        const responses = await sessionClient.detectIntent(request);\n        const result = responses[0].queryResult;\n        \n        handleApiAiResponse(sender, result);\n    }\n\n    /** Send an event to DialogFlow API\n     * \n     * \n     * @method sendEventToApiAi()\n     * @param {String} sessionIds                   Ids for actual session for send to API\n     * @param {Function} handleApiAiResponse        CallBack for handle response\n     * @param {*} sender                            Sender identifier\n     * @param {Event} event                         Event to send\n     * @param {Object} params                       API params\n     * \n     * @returns callback handleApiAiResponse()\n     * \n     */\n    async sendEventToApiAi(sessionIds, handleApiAiResponse, sender, event, params = {}) {\n        const sessionPath = sessionClient.sessionPath(this.googleProjectId, sessionIds.get(sender));\n        const request = {\n            session: sessionPath,\n            queryInput: {\n                event: {\n                    name: event,\n                    parameters: this.structjson.jsonToStructProto(params), //Dialogflow's v2 API uses gRPC. You'll need a jsonToStructProto method to convert your JavaScript object to a proto struct.\n                    languageCode: this.languageCode,\n                },\n            }\n        };\n \n \n        const responses = await sessionClient.detectIntent(request);\n \n        const result = responses[0].queryResult;\n        handleApiAiResponse(sender, result);\n \n    }\n}\n"]}