{"version":3,"sources":["../../../js/providers/facebook/fbProvider.js"],"names":["graphMsgURL","pageToken","appSecret","console","log","constants","messageAttachments","senderID","sendTextMessage","messageId","appId","metadata","message","sender","type","speech","replies","b","length","reply","push","sendQuickReply","title","sendImageMessage","imageUrl","messageData","recipient","id","payload","facebook","callSendAPI","messages","elements","map","buttons","m","isLink","postback","substring","button","Button","text","url","element","Element","image_url","subtitle","sendGenericMessage","event","recipientID","watermark","read","sequenceNumber","seq","status","account_linking","authCode","authorization_code","delivery","messageIDs","mids","forEach","messageID","timeOfAuth","timestamp","passThroughParam","optin","ref","req","res","buf","signature","headers","Error","split","method","signatureHash","expectedHash","crypto","createHmac","update","digest","recipientId","recipient_name","currency","payment_method","address","summary","adjustments","receiptId","Math","floor","random","attachment","template_type","order_number","quick_replies","sender_action","uri","qs","access_token","json","error","response","body","statusCode","recipient_id","message_id","statusMessage"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAGA;;;;;;;;;AASA;;;;;;;AAQI,oBAAYA,WAAZ,EAAyBC,SAAzB,EAAoCC,SAApC,EAA8C;AAAA;;AAC1CC,gBAAQC,GAAR,CAAY,uBAAuBJ,WAAvB,GAAqCC,SAArC,GAAiDC,SAA7D;AACA,aAAKG,SAAL,GAAiB,EAAjB;AACA,aAAKA,SAAL,CAAeL,WAAf,GAA6BA,WAA7B;AACA,aAAKK,SAAL,CAAeJ,SAAf,GAA2BA,SAA3B;AACA,aAAKI,SAAL,CAAeH,SAAf,GAA2BA,SAA3B;AAEH;;AAED;;;;AAIA;;;;;;;;;iDAKyBI,kB,EAAoBC,Q,EAAS;AAClD,iBAAKC,eAAL,CAAqBD,QAArB,EAA+B,iCAA/B;AACH;;AAED;;;;;;;;;mCAMWE,S,EAAUC,K,EAAOC,Q,EAAS;AACjCR,oBAAQC,GAAR,gCAAyCK,SAAzC,iBAA8DC,KAA9D,uBAAqFC,QAArF;AACH;;AAED;;;;;;;;sCAKcC,O,EAASC,M,EAAO;;AAE1B,oBAAQD,QAAQE,IAAhB;AACI,qBAAK,CAAL;AAAQ;AACJ,yBAAKN,eAAL,CAAqBK,MAArB,EAA6BD,QAAQG,MAArC;AACJ;;AAEA,qBAAK,CAAL;AAAQ;AACJ,wBAAIC,UAAU,EAAd;AACA,yBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIL,QAAQI,OAAR,CAAgBE,MAApC,EAA4CD,GAA5C,EAAiD;AAC7C,4BAAIE,QACJ;AACI,4CAAgB,MADpB;AAEI,qCAASP,QAAQI,OAAR,CAAgBC,CAAhB,CAFb;AAGI,uCAAWL,QAAQI,OAAR,CAAgBC,CAAhB;AAHf,yBADA;AAMAD,gCAAQI,IAAR,CAAaD,KAAb;AACH;AACD,yBAAKE,cAAL,CAAoBR,MAApB,EAA4BD,QAAQU,KAApC,EAA2CN,OAA3C;AACJ;;AAEA,qBAAK,CAAL;AAAQ;AACJ,yBAAKO,gBAAL,CAAsBV,MAAtB,EAA8BD,QAAQY,QAAtC;;AAEJ;;AAEA,qBAAK,CAAL;AACI;AACA,wBAAIC,cAAc;AACdC,mCAAW;AACPC,gCAAId;AADG,yBADG;AAIdD,iCAASA,QAAQgB,OAAR,CAAgBC;;AAJX,qBAAlB;;AAQA,yBAAKC,WAAL,CAAiBL,WAAjB;;AAEJ;AApCJ;AAsCH;;AAED;;;;;;;;2CAKmBM,Q,EAAUlB,M,EAAO;AAChC,gBAAImB,WAAW,EAAf;;AAEA,gBAAGD,QAAH,EAAY;AACRA,yBAASE,GAAT,CAAc,aAAK;AACf,wBAAIC,UAAU,EAAd;;AAEAC,sBAAED,OAAF,CAAUD,GAAV,CAAe,aAAK;AAChB,4BAAIG,SAAUnB,EAAEoB,QAAF,CAAWC,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,MAA7C;AACA,4BAAIC,SAAS,IAAIC,uBAAJ,EAAb;;AAEAD,+BAAOjB,KAAP,GAAeL,EAAEwB,IAAjB;AACAF,+BAAOG,GAAP,GAAazB,EAAEoB,QAAf;;AAEA,4BAAID,MAAJ,EAAY;AACRG,mCAAOzB,IAAP,GAAc,SAAd;;AAEA;AACA;AACA;AACA;AACA;AACH,yBARD,MAQO;AACHyB,mCAAOzB,IAAP,GAAc,UAAd;AACA;AACA;AACA;AACA;AACA;AACH;AACDoB,gCAAQd,IAAR,CAAamB,MAAb;AACH,qBAxBD;;AA0BA,wBAAII,UAAU,IAAIC,wBAAJ,EAAd;AACAD,4BAAQrB,KAAR,GAAgBa,EAAEb,KAAlB;AACAqB,4BAAQE,SAAR,GAAoBV,EAAEX,QAAtB;AACAmB,4BAAQG,QAAR,GAAmBX,EAAEW,QAArB;AACAH,4BAAQT,OAAR,GAAkBA,OAAlB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAF,6BAASZ,IAAT,CAAcuB,OAAd;AACH,iBA1CD;AA2CH;;AAEDxC,oBAAQC,GAAR,CAAY,cAAZ;AACAD,oBAAQC,GAAR,CAAY4B,QAAZ;AACA,iBAAKe,kBAAL,CAAwBlC,MAAxB,EAAgCmB,QAAhC;AACH;;AAGD;;;;;AAKA;;;;;;;;;4CAOoBgB,K,EAAM;AACtB,gBAAIzC,WAAWyC,MAAMnC,MAAN,CAAac,EAA5B;AACA,gBAAIsB,cAAcD,MAAMtB,SAAN,CAAgBC,EAAlC;;AAEA;AACA,gBAAIuB,YAAYF,MAAMG,IAAN,CAAWD,SAA3B;AACA,gBAAIE,iBAAiBJ,MAAMG,IAAN,CAAWE,GAAhC;;AAEAlD,oBAAQC,GAAR,CAAY,+DACR,WADJ,EACiB8C,SADjB,EAC4BE,cAD5B;AAEH;;AAED;;;;;;;;;;;4CASoBJ,K,EAAM;AACtB,gBAAIzC,WAAWyC,MAAMnC,MAAN,CAAac,EAA5B;AACA,gBAAIsB,cAAcD,MAAMtB,SAAN,CAAgBC,EAAlC;;AAEA,gBAAI2B,SAASN,MAAMO,eAAN,CAAsBD,MAAnC;AACA,gBAAIE,WAAWR,MAAMO,eAAN,CAAsBE,kBAArC;;AAEAtD,oBAAQC,GAAR,CAAY,iEACR,mBADJ,EACyBG,QADzB,EACmC+C,MADnC,EAC2CE,QAD3C;AAEH;;AAED;;;;;;;;;;qDAO6BR,K,EAAM;AAC/B,gBAAIzC,WAAWyC,MAAMnC,MAAN,CAAac,EAA5B;AACA,gBAAIsB,cAAcD,MAAMtB,SAAN,CAAgBC,EAAlC;AACA,gBAAI+B,WAAWV,MAAMU,QAArB;AACA,gBAAIC,aAAaD,SAASE,IAA1B;AACA,gBAAIV,YAAYQ,SAASR,SAAzB;AACA,gBAAIE,iBAAiBM,SAASL,GAA9B;;AAEA,gBAAIM,UAAJ,EAAgB;AACZA,2BAAWE,OAAX,CAAmB,UAACC,SAAD,EAAe;AAC9B3D,4BAAQC,GAAR,CAAY,mDAAZ,EACI0D,SADJ;AAEH,iBAHD;AAIH;;AAED3D,oBAAQC,GAAR,CAAY,uCAAZ,EAAqD8C,SAArD;AACH;;AAED;;;;;;;;;;;;;;;;;;;;+CAiBuBF,K,EAAM;AACzB,gBAAIzC,WAAWyC,MAAMnC,MAAN,CAAac,EAA5B;AACA,gBAAIsB,cAAcD,MAAMtB,SAAN,CAAgBC,EAAlC;AACA,gBAAIoC,aAAaf,MAAMgB,SAAvB;AACA,gBAAIC,mBAAmBjB,MAAMkB,KAAN,CAAYC,GAAnC;;AAEAhE,oBAAQC,GAAR,CAAY,+DACR,0BADJ,EACgCG,QADhC,EAC0C0C,WAD1C,EACuDgB,gBADvD,EAEIF,UAFJ;;AAIA,iBAAKvD,eAAL,CAAqBD,QAArB,EAA+B,2BAA/B;AACH;;AAED;;;;;;;;;;;+CASuB6D,G,EAAKC,G,EAAKC,G,EAAI;AACjC,gBAAIC,YAAYH,IAAII,OAAJ,CAAY,iBAAZ,CAAhB;AACArE,oBAAQC,GAAR,CAAY,wBAAZ;AACA,gBAAI,CAACmE,SAAL,EAAgB;AACZ,sBAAM,IAAIE,KAAJ,CAAU,mCAAV,CAAN;AACH,aAFD,MAEO;AACH,oBAAIzC,WAAWuC,UAAUG,KAAV,CAAgB,GAAhB,CAAf;AACA,oBAAIC,SAAS3C,SAAS,CAAT,CAAb;AACA,oBAAI4C,gBAAgB5C,SAAS,CAAT,CAApB;;AAEA,oBAAI6C,eAAeC,iBAAOC,UAAP,CAAkB,MAAlB,EAA0B,KAAK1E,SAAL,CAAeH,SAAzC,EACd8E,MADc,CACPV,GADO,EAEdW,MAFc,CAEP,KAFO,CAAnB;;AAIA,oBAAIL,iBAAiBC,YAArB,EAAmC;AAC/B,0BAAM,IAAIJ,KAAJ,CAAU,0CAAV,CAAN;AACAtE,4BAAQC,GAAR,CAAY,0CAAZ;AACH;AACJ;AACJ;;AAED;;;;;;;;;;2CAOmB8E,W,EAAaC,c,EAAgBC,Q,EAAUC,c,EAAerB,S,EAAWhC,Q,EAAUsD,O,EAASC,O,EAASC,W,EAAY;;AAExH,gBAAIC,YAAY,UAAUC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,IAA3B,CAA1B;AACA,gBAAInE,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIdtE,yBAAS;AACLiF,gCAAY;AACR/E,8BAAM,UADE;AAERc,iCAAS;AACLkE,2CAAe,SADV;AAELX,4CAAgBA,cAFX;AAGLY,0CAAcN,SAHT;AAILL,sCAAUA,QAJL;AAKLC,4CAAgBA,cALX;AAMLrB,uCAAWA,SANN;AAOLhC,sCAAUA,QAPL;AAQLsD,qCAASA,OARJ;AASLC,qCAASA,OATJ;AAULC,yCAAaA;AAVR;AAFD;AADP;AAJK,aAAlB;;AAuBA,iBAAK1D,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;uCAGeyD,W,EAAazC,I,EAAMzB,O,EAASL,Q,EAAS;AAChD,gBAAIc,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIdtE,yBAAS;AACL6B,0BAAMA,IADD;AAEL9B,8BAAUA,WAAWA,QAAX,GAAsB,EAF3B;AAGLqF,mCAAehF;AAHV;AAJK,aAAlB;AAUA,iBAAKc,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;yCAGiByD,W,EAAa1D,Q,EAAS;AACnC,gBAAIC,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIdtE,yBAAS;AACLiF,gCAAY;AACR/E,8BAAM,OADE;AAERc,iCAAS;AACLc,iCAAKlB;AADA;AAFD;AADP;AAJK,aAAlB;AAaA,iBAAKM,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;0CAGkByD,W,EAAazC,I,EAAMP,O,EAAQ;;AAEzC,gBAAIT,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIdtE,yBAAS;AACLiF,gCAAY;AACR/E,8BAAM,UADE;AAERc,iCAAS;AACLkE,2CAAe,QADV;AAELrD,kCAAMA,IAFD;AAGLP,qCAASA;AAHJ;AAFD;AADP;AAJK,aAAlB;;AAgBA,iBAAKJ,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;;;2CAKmByD,W,EAAalD,Q,EAAS;;AAErC,gBAAIP,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIdtE,yBAAS;AACLiF,gCAAY;AACR/E,8BAAM,UADE;AAERc,iCAAS;AACLkE,2CAAe,SADV;AAEL9D,sCAAUA;AAFL;AAFD;AADP;AAJK,aAAlB;;AAeA,iBAAKF,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;;wCAIgByD,W,EAAa;;AAEzB/E,oBAAQC,GAAR,CAAY,gDAAZ;;AAEA,gBAAIqB,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIde,+BAAe;AAJD,aAAlB;;AAOA,iBAAKnE,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;;qCAIayD,W,EAAY;;AAErB/E,oBAAQC,GAAR,CAAY,6BAAZ;;AAEA,gBAAIqB,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIde,+BAAe;AAJD,aAAlB;;AAOA,iBAAKnE,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;;sCAIcyD,W,EAAY;;AAEtB/E,oBAAQC,GAAR,CAAY,8BAAZ;AACA,gBAAIqB,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIde,+BAAe;AAJD,aAAlB;;AAOA,iBAAKnE,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;;wCAKgByD,W,EAAazC,I,EAAK;;AAE9B,gBAAIhB,cAAc;AACdC,2BAAW;AACPC,wBAAIuD;AADG,iBADG;AAIdtE,yBAAS;AACL6B,0BAAMA;AADD;AAJK,aAAlB;AAQA,iBAAKX,WAAL,CAAiBL,WAAjB;AACH;;AAED;;;;;;;;;;oCAOYA,W,EAAY;AACpB,mCAAQ;AACJyE,qBAAK,KAAK7F,SAAL,CAAeL,WADhB;AAEJmG,oBAAI;AACAC,kCAAc,KAAK/F,SAAL,CAAeJ;AAD7B,iBAFA;AAKJ0E,wBAAQ,MALJ;AAMJ0B,sBAAM5E;;AANF,aAAR,EAQE,UAAC6E,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AACzB,oBAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,IAAuB,GAArC,EAA0C;AACtC,wBAAIvB,cAAcsB,KAAKE,YAAvB;AACA,wBAAIjG,YAAY+F,KAAKG,UAArB;;AAEA,wBAAIlG,SAAJ,EAAe;AACXN,gCAAQC,GAAR,CAAY,sDAAZ,EACIK,SADJ,EACeyE,WADf;AAEH,qBAHD,MAGO;AACH/E,gCAAQC,GAAR,CAAY,+CAAZ,EACI8E,WADJ;AAEH;AACJ,iBAXD,MAWO;AACH/E,4BAAQmG,KAAR,CAAc,yBAAd,EAAyCC,SAASE,UAAlD,EAA8DF,SAASK,aAAvE,EAAsFJ,KAAKF,KAA3F;AACH;AACJ,aAvBD;AAwBH","file":"fbProvider.js","sourcesContent":["import request from 'request'\nimport crypto from 'crypto'\nimport { Button, Element } from '../../models/facebookObjects';\n\n\n/**\n * \n * \n * @description Anonymus class to get the functions for using Facebook API.\n * \n * @version 0.0.1\n * \n */\n\n/** @constructor\n * \n * @argument {String} graphMsgURL       URL from Facebook Graph API\n * @argument {String} pageToken         Facebook token page\n */\n\nexport default class {\n\n    constructor(graphMsgURL, pageToken, appSecret){\n        console.log('Called constructor' + graphMsgURL + pageToken + appSecret);\n        this.constants = {};\n        this.constants.graphMsgURL = graphMsgURL;\n        this.constants.pageToken = pageToken;\n        this.constants.appSecret = appSecret;\n\n    }\n    \n    /** Handle methods\n     * \n     */\n\n    /** Handle Message attachments\n     * \n     * @param {*} messageAttachments \n     * @param {*} senderID \n     */\n    handleMessageAttachments(messageAttachments, senderID){\n        this.sendTextMessage(senderID, \"Attachment received. Thank you.\");\n    }\n\n    /** Handle echo\n     * \n     * @param {String} messageId \n     * @param {String} appId \n     * @param {String} metadata \n     */\n    handleEcho(messageId,appId, metadata){\n        console.log(`Received echo for message ${messageId} and app ${appId} with metadata ${metadata}`);\n    }\n\n    /** Handle message\n     * \n     * @param {String} message \n     * @param {String} sender \n     */\n    handleMessage(message, sender){\n\n        switch (message.type) {\n            case 0: //text\n                this.sendTextMessage(sender, message.speech);\n            break;\n            \n            case 2: //quick replies\n                let replies = [];\n                for (var b = 0; b < message.replies.length; b++) {\n                    let reply =\n                    {\n                        \"content_type\": \"text\",\n                        \"title\": message.replies[b],\n                        \"payload\": message.replies[b]\n                    }\n                    replies.push(reply);\n                }\n                this.sendQuickReply(sender, message.title, replies);\n            break;\n            \n            case 3: //image\n                this.sendImageMessage(sender, message.imageUrl);\n            \n            break;\n            \n            case 4:\n                // custom payload\n                var messageData = {\n                    recipient: {\n                        id: sender\n                    },\n                    message: message.payload.facebook\n\n                };\n\n                this.callSendAPI(messageData);\n\n            break;\n        }\n    }\n    \n    /** Handle cards messages\n     * \n     * @param {Array} messages \n     * @param {String} sender \n     */\n    handleCardMessages(messages, sender){\n        let elements = [];\n        \n        if(messages){\n            messages.map( m => {\n                let buttons = [];\n                \n                m.buttons.map( b => {\n                    let isLink = (b.postback.substring(0, 4) === 'http');\n                    let button = new Button();\n                    \n                    button.title = b.text;\n                    button.url = b.postback;\n                    \n                    if (isLink) {\n                        button.type = 'web_url';\n                        \n                        // button = {\n                        //     \"type\": \"web_url\",\n                        //     \"title\": message.buttons[b].text,\n                        //     \"url\": message.buttons[b].postback\n                        // }\n                    } else {\n                        button.type = 'postback';\n                        // button = {\n                        //     \"type\": \"postback\",\n                        //     \"title\": message.buttons[b].text,\n                        //     \"payload\": message.buttons[b].postback\n                        // }\n                    }\n                    buttons.push(button);\n                });\n\n                let element = new Element();\n                element.title = m.title;\n                element.image_url = m.imageUrl;\n                element.subtitle = m.subtitle;\n                element.buttons = buttons;\n\n                // let element = {\n                //     \"title\": message.title,\n                //     \"image_url\":message.imageUrl,\n                //     \"subtitle\": message.subtitle,\n                //     \"buttons\": buttons\n                // };\n                elements.push(element);\n            });\n        }\n\n        console.log('card message');\n        console.log(elements);\n        this.sendGenericMessage(sender, elements);\n    }\n\n\n    /** **Events Section**\n     *\n     *  @description Events functions.\n     */\n\n    /** Message Read Event\n     * \n     * @description This event is called when a previously-sent message has been read.\n     * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read\n     *\n     */\n\n    receivedMessageRead(event){\n        var senderID = event.sender.id;\n        var recipientID = event.recipient.id;\n\n        // All messages before watermark (a timestamp) or sequence have been seen.\n        var watermark = event.read.watermark;\n        var sequenceNumber = event.read.seq;\n\n        console.log(\"Received message read event for watermark %d and sequence \" +\n            \"number %d\", watermark, sequenceNumber);\n    }\n\n    /** Account Link Event\n     * \n     *\n     * @description This event is called when the Link Account or UnLink Account action has been\n     * tapped.\n     * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking\n     *\n     */\n\n    receivedAccountLink(event){\n        var senderID = event.sender.id;\n        var recipientID = event.recipient.id;\n\n        var status = event.account_linking.status;\n        var authCode = event.account_linking.authorization_code;\n\n        console.log(\"Received account link event with for user %d with status %s \" +\n            \"and auth code %s \", senderID, status, authCode);\n    }\n\n    /** Delivery Confirmation Event\n     * \n     *\n     * @description This event is sent to confirm the delivery of a message. Read more about\n     * these fields at @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered\n     *\n     */\n    receivedDeliveryConfirmation(event){\n        var senderID = event.sender.id;\n        var recipientID = event.recipient.id;\n        var delivery = event.delivery;\n        var messageIDs = delivery.mids;\n        var watermark = delivery.watermark;\n        var sequenceNumber = delivery.seq;\n\n        if (messageIDs) {\n            messageIDs.forEach((messageID) => {\n                console.log(\"Received delivery confirmation for message ID: %s\",\n                    messageID);\n            });\n        }\n\n        console.log(\"All message before %d were delivered.\", watermark);\n    }\n\n    /** Authorization Event\n     *\n     * @description The value for 'optin.ref' is defined in the entry point. For the \"Send to\n     * Messenger\" plugin, it is the 'data-ref' field. Read more at\n     * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication\n     *\n     * The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'\n     * The developer can set this to an arbitrary value to associate the\n     * authentication callback with the 'Send to Messenger' click event. This is\n     * a way to do account linking when the user clicks the 'Send to Messenger'\n     * plugin.\n     * \n     * \n     * When an authentication is received, we'll send a message back to the sender\n     * to let them know it was successful.\n     * \n     */\n    receivedAuthentication(event){\n        var senderID = event.sender.id;\n        var recipientID = event.recipient.id;\n        var timeOfAuth = event.timestamp;\n        var passThroughParam = event.optin.ref;\n\n        console.log(\"Received authentication for user %d and page %d with pass \" +\n            \"through param '%s' at %d\", senderID, recipientID, passThroughParam,\n            timeOfAuth);\n\n        this.sendTextMessage(senderID, \"Authentication successful\");\n    }\n\n    /** Verify that the callback came from Facebook. \n     * @description Using the App Secret from\n     * the App Dashboard, we can verify the signature that is sent with each\n     * callback in the x-hub-signature field, located in the header.\n     *\n     * @link https://developers.facebook.com/docs/graph-api/webhooks#setup\n     *\n     */\n\n    verifyRequestSignature(req, res, buf){\n        var signature = req.headers[\"x-hub-signature\"];\n        console.log('verifyRequestSignature');\n        if (!signature) {\n            throw new Error('Couldn\\'t validate the signature.');\n        } else {\n            var elements = signature.split('=');\n            var method = elements[0];\n            var signatureHash = elements[1];\n\n            var expectedHash = crypto.createHmac('sha1', this.constants.appSecret)\n                .update(buf)\n                .digest('hex');\n\n            if (signatureHash != expectedHash) {\n                throw new Error(\"Couldn't validate the request signature.\");\n                console.log(\"Couldn't validate the request signature.\");\n            }\n        }\n    }\n\n    /** Send a message with a Receipt\n     * \n     * @namespace modify\n     * \n     * @var receiptId Generate a random receipt ID as the API requires a unique ID\n     *\n     */\n    sendReceiptMessage(recipientId, recipient_name, currency, payment_method,timestamp, elements, address, summary, adjustments){\n\n        var receiptId = \"order\" + Math.floor(Math.random() * 1000);\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            message: {\n                attachment: {\n                    type: \"template\",\n                    payload: {\n                        template_type: \"receipt\",\n                        recipient_name: recipient_name,\n                        order_number: receiptId,\n                        currency: currency,\n                        payment_method: payment_method,\n                        timestamp: timestamp,\n                        elements: elements,\n                        address: address,\n                        summary: summary,\n                        adjustments: adjustments\n                    }\n                }\n            }\n        };\n\n        this.callSendAPI(messageData);\n    }\n\n    /** Send a message with Quick Reply buttons.\n     *\n     */\n    sendQuickReply(recipientId, text, replies, metadata){\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            message: {\n                text: text,\n                metadata: metadata ? metadata : '',\n                quick_replies: replies\n            }\n        };\n        this.callSendAPI(messageData);\n    }\n\n    /** Send an image using the Send API.\n     *\n     */\n    sendImageMessage(recipientId, imageUrl){\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            message: {\n                attachment: {\n                    type: \"image\",\n                    payload: {\n                        url: imageUrl\n                    }\n                }\n            }\n        };\n        this.callSendAPI(messageData);\n    }\n\n    /** Send a Gif using the Send API.\n     *\n     */\n    // sendGifMessage(recipientId){\n    //     var messageData = {\n    //         recipient: {\n    //             id: recipientId\n    //         },\n    //         message: {\n    //             attachment: {\n    //                 type: \"image\",\n    //                 payload: {\n    //                     url: config.serverURL + \"/assets/instagram_logo.gif\"\n    //                 }\n    //             }\n    //         }\n    //     };\n    //     this.callSendAPI(messageData);\n    // }\n\n    /** Send audio using the Send API.\n     *\n     */\n    // sendAudioMessage(recipientId){\n    //     var messageData = {\n    //         recipient: {\n    //             id: recipientId\n    //         },\n    //         message: {\n    //             attachment: {\n    //                 type: \"audio\",\n    //                 payload: {\n    //                     url: config.serverURL + \"/assets/sample.mp3\"\n    //                 }\n    //             }\n    //         }\n    //     };\n\n    //     this.callSendAPI(messageData);\n    // }\n\n    /** Send a video using the Send API.\n     *  @example  videoName: \"/assets/allofus480.mov\"\n     * \n     * \n     */\n    // sendVideoMessage(recipientId, videoName){\n        \n    //     var messageData = {\n    //         recipient: {\n    //             id: recipientId\n    //         },\n    //         message: {\n    //             attachment: {\n    //                 type: \"video\",\n    //                 payload: {\n    //                     url: config.serverURL + videoName\n    //                 }\n    //             }\n    //         }\n    //     };\n\n    //     this.callSendAPI(messageData);\n    // }\n\n    /** Send a video using the Send API.\n     * \n     * @example fileName: fileName\"/assets/test.txt\"\n     * \n     * \n     */\n    // sendFileMessage(recipientId, fileName) {\n    //     var messageData = {\n    //         recipient: {\n    //             id: recipientId\n    //         },\n    //         message: {\n    //             attachment: {\n    //                 type: \"file\",\n    //                 payload: {\n    //                     url: config.serverURL + fileName\n    //                 }\n    //             }\n    //         }\n    //     };\n\n    //     this.callSendAPI(messageData);\n    // }\n\n    /** Send a button message using the Send API.\n     *\n     */\n    sendButtonMessage(recipientId, text, buttons){\n\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            message: {\n                attachment: {\n                    type: \"template\",\n                    payload: {\n                        template_type: \"button\",\n                        text: text,\n                        buttons: buttons\n                    }\n                }\n            }\n        };\n\n        this.callSendAPI(messageData);\n    }\n\n    /** Send Generic Message\n     * \n     * @param {*} recipientId \n     * @param {*} elements \n     */\n    sendGenericMessage(recipientId, elements){\n\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            message: {\n                attachment: {\n                    type: \"template\",\n                    payload: {\n                        template_type: \"generic\",\n                        elements: elements\n                    }\n                }\n            }\n        };\n\n        this.callSendAPI(messageData);\n    } \n    \n    /**Send a read receipt to indicate the message has been read\n     * \n     * @param {*} recipientId \n     */\n    sendReadReceipt(recipientId) {\n        \n        console.log(\"Sending a read receipt to mark message as seen\");\n\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            sender_action: \"mark_seen\"\n        };\n\n        this.callSendAPI(messageData);\n    }\n\n    /**Turn typing indicator on\n     * \n     * @param {*} recipientId \n     */\n    sendTypingOn(recipientId){\n        \n        console.log(\"Turning typing indicator on\");\n\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            sender_action: \"typing_on\"\n        };\n\n        this.callSendAPI(messageData);\n    }\n\n    /**Turn typing indicator off\n     * \n     * @param {*} recipientId \n     */\n    sendTypingOff(recipientId){\n        \n        console.log(\"Turning typing indicator off\");\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            sender_action: \"typing_off\"\n        };\n\n        this.callSendAPI(messageData);\n    }\n\n    /** Send a message with the account linking call-to-action\n     * \n     * @param {*} recipientId \n     */\n    // sendAccountLinking(recipientId){\n    //     var messageData = {\n    //         recipient: {\n    //             id: recipientId\n    //         },\n    //         message: {\n    //             attachment: {\n    //                 type: \"template\",\n    //                 payload: {\n    //                     template_type: \"button\",\n    //                     text: \"Welcome. Link your account.\",\n    //                     buttons: [{\n    //                         type: \"account_link\",\n    //                         url: config.serverURL + \"/authorize\"\n    //                     }]\n    //                 }\n    //             }\n    //         }\n    //     };\n\n    //     callSendAPI(messageData);\n    // }\n\n    /** Send Text Message\n     * \n     * @param {*} recipientId \n     * @param {*} text \n     */\n    sendTextMessage(recipientId, text){\n\n        var messageData = {\n            recipient: {\n                id: recipientId\n            },\n            message: {\n                text: text\n            }\n        }\n        this.callSendAPI(messageData);\n    }\n\n    /** Call the Send API.\n     * \n     * @description The message data goes in the body. If successful, we'll\n     * get the message id in a response\n     * \n     * @param {*} messageData \n     */\n    callSendAPI(messageData){\n        request({\n            uri: this.constants.graphMsgURL,\n            qs: {\n                access_token: this.constants.pageToken\n            },\n            method: 'POST',\n            json: messageData\n\n        },(error, response, body) => {\n            if (!error && response.statusCode == 200) {\n                var recipientId = body.recipient_id;\n                var messageId = body.message_id;\n\n                if (messageId) {\n                    console.log(\"Successfully sent message with id %s to recipient %s\",\n                        messageId, recipientId);\n                } else {\n                    console.log(\"Successfully called Send API for recipient %s\",\n                        recipientId);\n                }\n            } else {\n                console.error(\"Failed calling Send API\", response.statusCode, response.statusMessage, body.error);\n            }\n        });\n    }\n}"]}