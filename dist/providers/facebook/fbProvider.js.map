{"version":3,"sources":["../../../js/providers/facebook/fbProvider.js"],"names":["graphMsgURL","pageToken","appSecret","constants","handleMessage","bind","handleMessageAttachments","handleEcho","handleCardMessages","receivedMessageRead","receivedAccountLink","receivedAuthentication","receivedDeliveryConfirmation","callSendAPI","sendButtonMessage","sendGenericMessage","verifyRequestSignature","messageAttachments","senderID","sendTextMessage","messageId","appId","metadata","console","log","message","sender","type","speech","replies","b","length","reply","push","sendQuickReply","title","sendImageMessage","imageUrl","messageData","recipient","id","payload","facebook","messages","elements","map","buttons","m","isLink","postback","substring","button","Button","text","url","element","Element","image_url","subtitle","event","recipientID","watermark","read","sequenceNumber","seq","status","account_linking","authCode","authorization_code","delivery","messageIDs","mids","forEach","messageID","timeOfAuth","timestamp","passThroughParam","optin","ref","req","res","buf","signature","headers","Error","split","method","signatureHash","expectedHash","crypto","createHmac","update","digest","sendReceiptMessage","recipientId","recipient_name","currency","payment_method","address","summary","adjustments","receiptId","Math","floor","random","attachment","template_type","order_number","quick_replies","sendReadReceipt","sender_action","sendTypingOn","sendTypingOff","uri","qs","access_token","json","error","response","body","statusCode","recipient_id","message_id","statusMessage"],"mappings":"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","file":"fbProvider.js","sourcesContent":["import request from 'request'\nimport crypto from 'crypto'\nimport { Button, Element } from '../../models/facebookObjects';\n\n\n/**\n * \n * \n * @description Anonymus class to get the functions for using Facebook API.\n * \n * @version 0.0.1\n * \n */\n\n/** @constructor\n * \n * @argument {String} graphMsgURL       URL from Facebook Graph API\n * @argument {String} pageToken         Facebook token page\n */\n\nexport default class {\n\n    constructor(graphMsgURL, pageToken, appSecret){\n        this.constants = {};\n        this.constants.graphMsgURL = graphMsgURL;\n        this.constants.pageToken = pageToken;\n        this.constants.appSecret = appSecret;\n        \n        this.handleMessage = this.handleMessage.bind(this);\n        this.handleMessageAttachments = this.handleMessageAttachments.bind(this);\n        this.handleEcho = this.handleEcho.bind(this);\n        this.handleCardMessages = this.handleCardMessages.bind(this);\n\n        this.receivedMessageRead = this.receivedMessageRead.bind(this);\n        this.receivedAccountLink = this.receivedAccountLink.bind(this);\n        this.receivedAuthentication = this. receivedAuthentication.bind(this);\n        this.receivedDeliveryConfirmation = this.receivedDeliveryConfirmation.bind(this);\n        \n        this.callSendAPI = this.callSendAPI.bind(this);\n        this.sendButtonMessage = this.sendButtonMessage.bind(this);\n        this.sendGenericMessage = this.sendGenericMessage.bind(this);\n        this.verifyRequestSignature = this.verifyRequestSignature.bind(this);\n\n    }\n    \n    /** Handle methods **\n     * \n     */\n\n        /** Handle Message attachments\n         * \n         * @param {*} messageAttachments \n         * @param {*} senderID \n         */\n        handleMessageAttachments(messageAttachments, senderID){\n            this.sendTextMessage(senderID, \"Attachment received. Thank you.\");\n        }\n\n        /** Handle echo\n         * \n         * @param {String} messageId \n         * @param {String} appId \n         * @param {String} metadata \n         */\n        handleEcho(messageId,appId, metadata){\n            console.log(`Received echo for message ${messageId} and app ${appId} with metadata ${metadata}`);\n        }\n\n        /** Handle message\n         * \n         * @param {String} message \n         * @param {String} sender \n         */\n        handleMessage(message, sender){\n\n            switch (message.type) {\n                case 0: //text\n                    this.sendTextMessage(sender, message.speech);\n                break;\n                \n                case 2: //quick replies\n                    let replies = [];\n                    for (var b = 0; b < message.replies.length; b++) {\n                        let reply =\n                        {\n                            \"content_type\": \"text\",\n                            \"title\": message.replies[b],\n                            \"payload\": message.replies[b]\n                        }\n                        replies.push(reply);\n                    }\n                    this.sendQuickReply(sender, message.title, replies);\n                break;\n                \n                case 3: //image\n                    this.sendImageMessage(sender, message.imageUrl);\n                \n                break;\n                \n                case 4:\n                    // custom payload\n                    var messageData = {\n                        recipient: {\n                            id: sender\n                        },\n                        message: message.payload.facebook\n\n                    };\n\n                    this.callSendAPI(messageData);\n\n                break;\n            }\n        }\n        \n        /** Handle cards messages\n         * \n         * @param {Array} messages \n         * @param {String} sender \n         */\n        handleCardMessages(messages, sender){\n            let elements = [];\n            \n            if(messages){\n                messages.map( m => {\n                    let buttons = [];\n                    \n                    m.buttons.map( b => {\n                        let isLink = (b.postback.substring(0, 4) === 'http');\n                        let button = new Button();\n                        \n                        button.title = b.text;\n                        button.url = b.postback;\n                        \n                        if (isLink) {\n                            button.type = 'web_url';\n                            \n                            // button = {\n                            //     \"type\": \"web_url\",\n                            //     \"title\": message.buttons[b].text,\n                            //     \"url\": message.buttons[b].postback\n                            // }\n                        } else {\n                            button.type = 'postback';\n                            // button = {\n                            //     \"type\": \"postback\",\n                            //     \"title\": message.buttons[b].text,\n                            //     \"payload\": message.buttons[b].postback\n                            // }\n                        }\n                        buttons.push(button);\n                    });\n\n                    let element = new Element();\n                    element.title = m.title;\n                    element.image_url = m.imageUrl;\n                    element.subtitle = m.subtitle;\n                    element.buttons = buttons;\n\n                    // let element = {\n                    //     \"title\": message.title,\n                    //     \"image_url\":message.imageUrl,\n                    //     \"subtitle\": message.subtitle,\n                    //     \"buttons\": buttons\n                    // };\n                    elements.push(element);\n                });\n            }\n\n            console.log('card message');\n            console.log(elements);\n            this.sendGenericMessage(sender, elements);\n        }\n\n\n    /** **Events Section **\n     *\n     *  @description Events functions.\n     */\n\n        /** Message Read Event\n         * \n         * @description This event is called when a previously-sent message has been read.\n         * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-read\n         *\n         */\n\n        receivedMessageRead(event){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n\n            // All messages before watermark (a timestamp) or sequence have been seen.\n            var watermark = event.read.watermark;\n            var sequenceNumber = event.read.seq;\n\n            console.log(\"Received message read event for watermark %d and sequence \" +\n                \"number %d\", watermark, sequenceNumber);\n        }\n\n        /** Account Link Event\n         * \n         *\n         * @description This event is called when the Link Account or UnLink Account action has been\n         * tapped.\n         * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/account-linking\n         *\n         */\n\n        receivedAccountLink(event){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n\n            var status = event.account_linking.status;\n            var authCode = event.account_linking.authorization_code;\n\n            console.log(\"Received account link event with for user %d with status %s \" +\n                \"and auth code %s \", senderID, status, authCode);\n        }\n\n        /** Delivery Confirmation Event\n         * \n         *\n         * @description This event is sent to confirm the delivery of a message. Read more about\n         * these fields at @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/message-delivered\n         *\n         */\n        receivedDeliveryConfirmation(event){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n            var delivery = event.delivery;\n            var messageIDs = delivery.mids;\n            var watermark = delivery.watermark;\n            var sequenceNumber = delivery.seq;\n\n            if (messageIDs) {\n                messageIDs.forEach((messageID) => {\n                    console.log(\"Received delivery confirmation for message ID: %s\",\n                        messageID);\n                });\n            }\n\n            console.log(\"All message before %d were delivered.\", watermark);\n        }\n\n        /** Authorization Event\n         *\n         * @description The value for 'optin.ref' is defined in the entry point. For the \"Send to\n         * Messenger\" plugin, it is the 'data-ref' field. Read more at\n         * @link https://developers.facebook.com/docs/messenger-platform/webhook-reference/authentication\n         *\n         * The 'ref' field is set in the 'Send to Messenger' plugin, in the 'data-ref'\n         * The developer can set this to an arbitrary value to associate the\n         * authentication callback with the 'Send to Messenger' click event. This is\n         * a way to do account linking when the user clicks the 'Send to Messenger'\n         * plugin.\n         * \n         * \n         * When an authentication is received, we'll send a message back to the sender\n         * to let them know it was successful.\n         * \n         */\n        receivedAuthentication(event){\n            var senderID = event.sender.id;\n            var recipientID = event.recipient.id;\n            var timeOfAuth = event.timestamp;\n            var passThroughParam = event.optin.ref;\n\n            console.log(\"Received authentication for user %d and page %d with pass \" +\n                \"through param '%s' at %d\", senderID, recipientID, passThroughParam,\n                timeOfAuth);\n\n            this.sendTextMessage(senderID, \"Authentication successful\");\n        }\n\n        /** Verify that the callback came from Facebook. \n         * @description Using the App Secret from\n         * the App Dashboard, we can verify the signature that is sent with each\n         * callback in the x-hub-signature field, located in the header.\n         *\n         * @link https://developers.facebook.com/docs/graph-api/webhooks#setup\n         *\n         */\n\n        verifyRequestSignature(req, res, buf){\n            var signature = req.headers[\"x-hub-signature\"];\n            console.log('verifyRequestSignature');\n            console.log(this);\n            if (!signature) {\n                throw new Error('Couldn\\'t validate the signature.');\n            } else {\n                var elements = signature.split('=');\n                var method = elements[0];\n                var signatureHash = elements[1];\n\n                var expectedHash = crypto.createHmac('sha1', this.constants.appSecret)\n                    .update(buf)\n                    .digest('hex');\n\n                if (signatureHash != expectedHash) {\n                    throw new Error(\"Couldn't validate the request signature.\");\n                    console.log(\"Couldn't validate the request signature.\");\n                }\n            }\n        }\n\n        /** Send a message with a Receipt\n         * \n         * @namespace modify\n         * \n         * @var receiptId Generate a random receipt ID as the API requires a unique ID\n         *\n         */\n        sendReceiptMessage(recipientId, recipient_name, currency, payment_method,timestamp, elements, address, summary, adjustments){\n\n            var receiptId = \"order\" + Math.floor(Math.random() * 1000);\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"receipt\",\n                            recipient_name: recipient_name,\n                            order_number: receiptId,\n                            currency: currency,\n                            payment_method: payment_method,\n                            timestamp: timestamp,\n                            elements: elements,\n                            address: address,\n                            summary: summary,\n                            adjustments: adjustments\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Send a message with Quick Reply buttons.\n         *\n         */\n        sendQuickReply(recipientId, text, replies, metadata){\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    text: text,\n                    metadata: metadata ? metadata : '',\n                    quick_replies: replies\n                }\n            };\n            this.callSendAPI(messageData);\n        }\n\n        /** Send an image using the Send API.\n         *\n         */\n        sendImageMessage(recipientId, imageUrl){\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"image\",\n                        payload: {\n                            url: imageUrl\n                        }\n                    }\n                }\n            };\n            this.callSendAPI(messageData);\n        }\n\n        /** Send a Gif using the Send API.\n         *\n         */\n        // sendGifMessage(recipientId){\n        //     var messageData = {\n        //         recipient: {\n        //             id: recipientId\n        //         },\n        //         message: {\n        //             attachment: {\n        //                 type: \"image\",\n        //                 payload: {\n        //                     url: config.serverURL + \"/assets/instagram_logo.gif\"\n        //                 }\n        //             }\n        //         }\n        //     };\n        //     this.callSendAPI(messageData);\n        // }\n\n        /** Send audio using the Send API.\n         *\n         */\n        // sendAudioMessage(recipientId){\n        //     var messageData = {\n        //         recipient: {\n        //             id: recipientId\n        //         },\n        //         message: {\n        //             attachment: {\n        //                 type: \"audio\",\n        //                 payload: {\n        //                     url: config.serverURL + \"/assets/sample.mp3\"\n        //                 }\n        //             }\n        //         }\n        //     };\n\n        //     this.callSendAPI(messageData);\n        // }\n\n        /** Send a video using the Send API.\n         *  @example  videoName: \"/assets/allofus480.mov\"\n         * \n         * \n         */\n        // sendVideoMessage(recipientId, videoName){\n            \n        //     var messageData = {\n        //         recipient: {\n        //             id: recipientId\n        //         },\n        //         message: {\n        //             attachment: {\n        //                 type: \"video\",\n        //                 payload: {\n        //                     url: config.serverURL + videoName\n        //                 }\n        //             }\n        //         }\n        //     };\n\n        //     this.callSendAPI(messageData);\n        // }\n\n        /** Send a video using the Send API.\n         * \n         * @example fileName: fileName\"/assets/test.txt\"\n         * \n         * \n         */\n        // sendFileMessage(recipientId, fileName) {\n        //     var messageData = {\n        //         recipient: {\n        //             id: recipientId\n        //         },\n        //         message: {\n        //             attachment: {\n        //                 type: \"file\",\n        //                 payload: {\n        //                     url: config.serverURL + fileName\n        //                 }\n        //             }\n        //         }\n        //     };\n\n        //     this.callSendAPI(messageData);\n        // }\n\n        /** Send a button message using the Send API.\n         *\n         */\n        sendButtonMessage(recipientId, text, buttons){\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"button\",\n                            text: text,\n                            buttons: buttons\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Send Generic Message\n         * \n         * @param {*} recipientId \n         * @param {*} elements \n         */\n        sendGenericMessage(recipientId, elements){\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    attachment: {\n                        type: \"template\",\n                        payload: {\n                            template_type: \"generic\",\n                            elements: elements\n                        }\n                    }\n                }\n            };\n\n            this.callSendAPI(messageData);\n        } \n        \n        /**Send a read receipt to indicate the message has been read\n         * \n         * @param {*} recipientId \n         */\n        sendReadReceipt(recipientId) {\n            \n            console.log(\"Sending a read receipt to mark message as seen\");\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                sender_action: \"mark_seen\"\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /**Turn typing indicator on\n         * \n         * @param {*} recipientId \n         */\n        sendTypingOn(recipientId){\n            \n            console.log(\"Turning typing indicator on\");\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                sender_action: \"typing_on\"\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /**Turn typing indicator off\n         * \n         * @param {*} recipientId \n         */\n        sendTypingOff(recipientId){\n            \n            console.log(\"Turning typing indicator off\");\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                sender_action: \"typing_off\"\n            };\n\n            this.callSendAPI(messageData);\n        }\n\n        /** Send a message with the account linking call-to-action\n         * \n         * @param {*} recipientId \n         */\n        // sendAccountLinking(recipientId){\n        //     var messageData = {\n        //         recipient: {\n        //             id: recipientId\n        //         },\n        //         message: {\n        //             attachment: {\n        //                 type: \"template\",\n        //                 payload: {\n        //                     template_type: \"button\",\n        //                     text: \"Welcome. Link your account.\",\n        //                     buttons: [{\n        //                         type: \"account_link\",\n        //                         url: config.serverURL + \"/authorize\"\n        //                     }]\n        //                 }\n        //             }\n        //         }\n        //     };\n\n        //     callSendAPI(messageData);\n        // }\n\n        /** Send Text Message\n         * \n         * @param {*} recipientId \n         * @param {*} text \n         */\n        sendTextMessage(recipientId, text){\n\n            var messageData = {\n                recipient: {\n                    id: recipientId\n                },\n                message: {\n                    text: text\n                }\n            }\n            this.callSendAPI(messageData);\n        }\n\n        /** Call the Send API.\n         * \n         * @description The message data goes in the body. If successful, we'll\n         * get the message id in a response\n         * \n         * @param {*} messageData \n         */\n        callSendAPI(messageData){\n            request({\n                uri: this.constants.graphMsgURL,\n                qs: {\n                    access_token: this.constants.pageToken\n                },\n                method: 'POST',\n                json: messageData\n\n            },(error, response, body) => {\n                if (!error && response.statusCode == 200) {\n                    var recipientId = body.recipient_id;\n                    var messageId = body.message_id;\n\n                    if (messageId) {\n                        console.log(\"Successfully sent message with id %s to recipient %s\",\n                            messageId, recipientId);\n                    } else {\n                        console.log(\"Successfully called Send API for recipient %s\",\n                            recipientId);\n                    }\n                } else {\n                    console.error(\"Failed calling Send API\", response.statusCode, response.statusMessage, body.error);\n                }\n            });\n        }\n}"]}